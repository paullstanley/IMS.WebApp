@inject NavigationManager NavigationManager
@inject IDeleteInventoriesUseCase DeleteInventoriesUseCase

@if (Inventory != null)
    {
    <tr>
        <td>@Inventory.InventoryName</td>
        <td>@Inventory.Quantity</td>
        <td>@Inventory.Price.ToString("c")</td>
        <td>
            <button type="button" class="btn btn-light" @onclick="@(() => EditInventory(Inventory.InventoryId))">Edit</button>
            <button type="button" class="btn btn-light" @onclick="@(async () => await DeleteInventory(Inventory))">Delete</button>
        </td>
    </tr>
    }

@code {

    [Parameter]
    public Inventory? Inventory { get; set; }

    [Parameter]
    public EventCallback OnInventoryDeleted { get; set; }

    private void EditInventory(int invId)
    {
        NavigationManager.NavigateTo($"/editinventory/{invId}");
    }

    private async Task DeleteInventory(Inventory inventory)
    {
        await DeleteInventoriesUseCase.ExecuteAsync(inventory.InventoryId);

        await OnInventoryDeleted.InvokeAsync();
    }
}

