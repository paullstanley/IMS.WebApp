@page "/editproduct/{id:int}"

@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

<h3>Edit Product</h3
<br />
@if (this.product != null)
    {
            <EditForm Model="product" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Product Name</label>
        <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
    </div>

    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
    </div>

    <ProductInventoriesComponent
        ProductInventories="product.ProductInventories"
        OnInventorySelected="OnInventorySelected"
        ></ProductInventoriesComponent>

    <br />
    <button type="submit" class="btn btn-primary">Save</button>

</EditForm>
    }

@code {
    private Product product;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        this.product = await ViewProductByIdUseCase.ExecuteAsync(this.Id);
    }

    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        this.product.ProductInventories = productInventories;
    }

    private void OnValidSubmit()
    {
        EditProductUseCase.ExecuteAsync(this.product);
        NavigationManager.NavigateTo("/products");

    }
}

